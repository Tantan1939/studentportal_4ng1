def activate_account(request, uidb64, token):

    if request.user.is_authenticated:
        auth_logout(request)

    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except(TypeError, ValueError, OverflowError, User.DoesNotExist):
        user = None
        messages.error(request, "Activation link is no longer valid.")
        return HttpResponseRedirect(reverse("studentportal:login"))

    if user is not None and account_activation_token.check_token(user, token):
        user.is_active = True
        user.save()

        messages.success(request, "Your account is now activated.")
    else:
        messages.error(request, "Activation link is no longer valid!")

    return HttpResponseRedirect(reverse("studentportal:login"))


@method_decorator(user_passes_test(not_authenticated_user, login_url="studentportal:index"), name="dispatch")
class activate_account(RedirectView):
    permanent = True
    pattern_name = "studentportal:login"

    def get(self, request, *args, **kwargs):
        try:
            uid = force_str(urlsafe_base64_decode(self.kwargs['uidb64']))
            user = User.objects.get(pk=uid)
        except(TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is not None and account_activation_token.check_token(user, self.kwargs['token']):
            user.is_active = True
            user.save()

            messages.success(self.request, "Your account is now activated.")
        else:
            messages.error(self.request, "Activation link is no longer valid!")


@method_decorator([user_passes_test(not_authenticated_user, login_url="studentportal:index"), ratelimit(key='ip', rate='0/s')], name="dispatch")
class password_reset_form(FormView):
    template_name = "studentportal/password_reset_form.html"
    form_class = resetpasswordForm
    success_url = "/login/"
    
    def dispatch(self, request, *args, **kwargs):
        try:
            uid = force_str(urlsafe_base64_decode(self.kwargs['uidb64']))
            user = User.objects.get(pk=uid)
            self.user_obj = user
        except(TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is not None and account_activation_token.check_token(user, self.kwargs['token']):
            messages.success(request, "You can now change your password.")
            return super().dispatch(request, *args, **kwargs)
        else:
            messages.error(
                request, "Password reset link is no longer valid!")
            return HttpResponseRedirect(reverse("studentportal:index"))

    def get_form_class(self):
        try:
            uid = force_str(urlsafe_base64_decode(self.kwargs['uidb64']))
            user = User.objects.get(pk=uid)
            self.user_obj = user
        except(TypeError, ValueError, OverflowError, User.DoesNotExist):
            user = None

        if user is not None and password_reset_token.check_token(user, self.kwargs['token']):
            messages.success(self.request, "You can now change your password.")

            form = resetpasswordForm
            return form
        else:
            messages.error(
                self.request, "Password reset link is no longer valid!")
            return HttpResponseRedirect(reverse("studentportal:login"))

    def form_valid(self, form):
        email = self.user_obj.email
        id = self.user_obj.id
        password = form.cleaned_data["password"]
        confirmpassword = form.cleaned_data["confirmpassword"]

        try:
            if User.objects.filter(pk=id, email=email).exists():
                if password == confirmpassword:
                    user = User.objects.get(pk=id, email=email)
                    user.set_password(password)
                    user.save()
                    messages.success(
                        self.request, "Password changed successfully.")
                    return super().form_valid(form)
                else:
                    messages.warning(
                        self.request, "Password and Confirm Password did not match.")
                    return super().form_invalid(form)
            else:
                messages.error(self.request, "User no longer exists.")
                return super().form_valid(form)
        except:
            messages.warning(
                self.request, "An error occurred while submitting your data. Try again.")
            return super().form_invalid(form)


@user_passes_test(not_authenticated_user, login_url="studentportal:index")
def password_reset_form(request, uidb64, token):
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = User.objects.get(pk=uid)
    except(TypeError, ValueError, OverflowError, User.DoesNotExist):
        user = None

    if user is not None and password_reset_token.check_token(user, token):
        messages.success(request, "You can now change your password.")
        user.set_password("newpass")
        user.save()
    else:
        messages.error(request, "Password reset link is no longer valid!")

    return HttpResponseRedirect(reverse("studentportal:login"))

<button name="wizard_goto_step" type="submit" class="btn btn-primary btn-sm"> Next </button>




    def merge_formField_keys(self, forms):
        f1 = [key for key in forms[0].declared_fields.keys()]
        f2 = [key for key in forms[1].declared_fields.keys()]
        f3 = [key for key in forms[2].declared_fields.keys()]
        f4 = [key for key in forms[3].declared_fields.keys()]
        f1.extend([f2[0], f3[0], f4[0]])
        return f1

    def detect_formField_changes(self, boundField, initialField, key):
        # if boundField == initialField:
        #     return False
        # # Return False if there's no changes from the initial values
        # return key
        return boundField == initialField

            form_fields = self.merge_formField_keys(
                [g11_firstSem, g11_secondSem, g12_firstSem, g12_secondSem])
            initial_values = [
                self.get_form_initial("g11_firstSem")["effective_date"],
                self.get_form_initial("g11_firstSem")["g11_firstSem_subjects"],
                self.get_form_initial("g11_secondSem")[
                    "g11_secondSem_subjects"],
                self.get_form_initial("g12_firstSem")["g12_firstSem_subjects"],
                self.get_form_initial("g12_secondSem")[
                    "g12_secondSem_subjects"],
            ]

            # changes = list(map(self.detect_formField_changes, [
            #                value for key, value in self.get_all_cleaned_data().items()], initial_values, form_fields))

            # if all(changes):
            #     messages.success(self.request, "Has changes")
            # else:
            #     messages.success(self.request, "No changes")
            # messages.success(self.request, changes)

            if self.get_form_instance("g11_firstSem").has_changed():
                messages.success(self.request, "changed")